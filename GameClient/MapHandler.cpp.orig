#include "MapHandler.h"
#include "MyAlgorithms.h"
#include <fstream>
#include "Imp.h"
#include "SpittingDemon.h"
#include "FrostDemon.h"
#include "Shade.h"
#include "BruteSteed.h"
#include "SoulEaterSteed.h"
#include "HellfireSteed.h"
#include "ThunderSteed.h"

Pathfinder *g_pathfinder;

MapHandler::MapHandler()
{
	this->m_currentWave = 0;
	this->m_waveTimer = 0.0f;
	this->m_enemySpawnTimer = 0.0f;
	this->m_gridHeight = 0;
	this->m_gridWidth = 0;
	this->m_nrOfPaths = 0;
	this->m_grid = NULL;
	this->m_paths = NULL;
	this->m_lives = 10;
}

MapHandler::~MapHandler()
{
	for(int i = 0; i < m_waves.size(); i++)
	{
		for(int j = 0; j < m_waves[i].size(); j++)
		{
			// If the waves wasnt added to the entity handler, simon must delete them here :')
			if(m_waves[i][j])
				delete m_waves[i][j];
		}
	}

	delete g_pathfinder;
	
	if(m_grid)
	{
		for(int i = 0; i < m_gridHeight; i++)
			delete m_grid[i];
		delete []m_grid;
	}

	if(m_paths)
		delete []m_paths;
}

MapHandler::State MapHandler::getState()
{
	if(this->m_lives <= 0)
	{
		return MapHandler::State::DEFEAT;
	}
	else if(this->m_currentWave > this->m_waves.size())
	{
		return MapHandler::State::VICTORY;
	}
	else
	{
		return MapHandler::State::RUNNING;
	}
}

void MapHandler::loadMap(std::string filename)
{
	this->m_waveTimer = 0.0f;

	int height;
	int width;
	Path paths[100];
	ifstream stream;
	stream.open(filename);
	while(!stream.eof())
	{
		char buf[1024];
		char key[1024];
		stream.getline(buf, 1024);
		sscanf(buf, "%s", key);
		
		if(strcmp(key, "width:") == 0)
		{
			sscanf(buf, "width: %d", &width);
		}
		else if(strcmp(key, "height:") == 0)
		{
			sscanf(buf, "height: %d", &height);
		}
		else if(strcmp(key, "MODELS:") == 0)
		{
			string s;
			bool done = false;
			while(!done)
			{
				stream.getline(buf, 1024);
				sscanf(buf, "%s", key);
				
				if(strcmp(key, "end") == 0)
				{
					done = true;
				}
				else
				{
					char in[100];
					FLOAT3 position;
					FLOAT3 rotation;
					sscanf(buf, "%s %f %f %f %f %f %f", &in, &position.x, &position.y, &position.z, &rotation.y, &rotation.x, &rotation.z);

					position.z = -position.z;
					rotation.x = rotation.x * (D3DX_PI/180.0f);
					
					Model *m = g_graphicsEngine->createModel(key, position);
					m->setRotation(rotation);

					EntityHandler::addEntity(new ServerEntity(position, rotation, new BoundingOrientedBox(*m->getObb()), ServerEntity::Type::StaticType));
					g_graphicsEngine->removeModel(m);
				}
			}
		}
		else if(strcmp(key, "GRID") == 0)
		{
			stream.getline(buf, 1024);
			sscanf(buf, "width, height %d %d", &m_gridWidth, &m_gridHeight);

			Map map = Map(this->m_gridWidth, this->m_gridHeight);
			
			m_grid = new bool*[m_gridHeight];
			for(int j = 0; j < m_gridHeight; j++)
			{
				m_grid[j] = new bool[m_gridWidth];

				stream.getline(buf, 1024);
				sscanf(buf, "%s", key);

				for(int i = 0; i < m_gridWidth; i++)
				{
					//m_grid[j][i] = atoi(&key[i]);
					m_grid[j][i] = '0' - key[i];

					if(m_grid[j][i] == true)
					{
						map.getNode(Position(i, j))->actAsWall();
					}
				}
			}

			g_pathfinder = new Pathfinder(map, FLOAT2(width, height));

			// The END string key should be here, get rid of it
			//stream.getline(buf, 1024);
		}
		else if(strcmp(key, "path") == 0)
		{
			stream.getline(buf, 1024);
			sscanf(buf, "%s", key);

			int nrOfPoints = 0;
			FLOAT2 points[100];
			while(strcmp(key, "end") != 0)
			{
				float notInvertZ;
				sscanf(buf, "%f %f", &points[nrOfPoints].x, &notInvertZ);
				points[nrOfPoints].y = -notInvertZ;
				nrOfPoints++;
				stream.getline(buf, 1024);
				sscanf(buf, "%s", key);
			}
			
			FLOAT2* optimizedPoints = new FLOAT2[nrOfPoints];
			for(int i = 0; i < nrOfPoints; i++)
			{
				optimizedPoints[i] = points[i];
			}

			paths[m_nrOfPaths++] = Path(nrOfPoints, optimizedPoints);
			delete []optimizedPoints;
		}
	}
	
	m_paths = new Path[m_nrOfPaths];
	
	for(int i = 0; i < m_nrOfPaths; i++)
		m_paths[i] = paths[i];
	
	this->m_waves.push_back(vector<ServerEntity*>());
	
	
	int t = random(0,0);
<<<<<<< HEAD
	m_waves[0].push_back(new HellfireSteed(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	m_waves[0].push_back(new Imp(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	t = random(1,1);
	m_waves[0].push_back(new BruteSteed(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	m_waves[0].push_back(new SpittingDemon(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	t = random(2,2);
	m_waves[0].push_back(new ThunderSteed(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	m_waves[0].push_back(new FrostDemon(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	t = random(3,3);
	m_waves[0].push_back(new SoulEaterSteed(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	m_waves[0].push_back(new Shade(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));

=======
	//t = random(0,4);
	//t = random(0,4);
	//t = random(0,4);
	//t = random(0,4);
	//t = random(0,4);
	m_waves[0].push_back(new Enemy(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	//t = random(0,4);
	m_waves[0].push_back(new Enemy(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	//t = random(0,4);
	m_waves[0].push_back(new Enemy(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	//t = random(0,4);
	m_waves[0].push_back(new Enemy(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	//t = random(0,4);
	m_waves[0].push_back(new Enemy(FLOAT3(this->m_paths[t].points[0].x, 0.0f, this->m_paths[t].points[0].y), this->m_paths[t]));
	//t = random(0,4);
>>>>>>> 6295eed57c325259416915a13a70e232f63d11ec
	
	
	

}

void MapHandler::update(float _dt)
{
	if(m_waveTimer > 0.0f)
	{
		m_waveTimer = max(m_waveTimer-_dt, 0.0f);
	}
	else if(m_waveTimer == 0.0f && m_currentWave < m_waves.size())
	{
		this->m_enemySpawnTimer = max(this->m_enemySpawnTimer-_dt, 0.0f);

		if(this->m_enemySpawnTimer == 0.0f)
		{
			if(this->m_waves[this->m_currentWave].empty() == false)
			{
				EntityHandler::addEntity(this->m_waves[this->m_currentWave].front());
				this->m_waves[this->m_currentWave].erase(this->m_waves[this->m_currentWave].begin());
				this->m_enemySpawnTimer = 2.0f;
			}
			else
			{
				m_currentWave++;
				this->m_waveTimer = -1.0f;
			}
		}
	}
	else if(EntityHandler::getNrOfEnemies() == 0)
	{	
		if(this->m_currentWave < m_waves.size())
		{
			m_waveTimer = 10.0f;
		}
		else
		{
			this->m_currentWave = this->m_waves.size() + 1;
		}
	}
}

void MapHandler::enemyDied()
{
	this->m_lives--;
}